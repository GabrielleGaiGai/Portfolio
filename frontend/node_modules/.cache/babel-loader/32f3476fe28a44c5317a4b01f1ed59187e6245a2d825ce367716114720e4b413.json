{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst POSTS_URL = \"http://localhost:3500/projects/get\";\nconst initialState = {\n  projects: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects/get', async () => {\n  const response = await axios.get(POSTS_URL);\n  console.log(response);\n  return response.data;\n});\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    projectAdded: {\n      reducer: (state, action) => {\n        state.projects.push(action.payload);\n      },\n      prepare: (title, content) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title: title,\n            content: content\n          }\n        };\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchProjects.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Adding date and reactions\n      let min = 1;\n      const loadedPosts = action.payload.map(post => {\n        post.date = sub(new Date(), {\n          minutes: min++\n        }).toISOString();\n        post.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0\n        };\n        return post;\n      });\n\n      // Add any fetched posts to the array\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      // Fix for API post IDs:\n      // Creating sortedPosts & assigning the id \n      // would be not be needed if the fake API \n      // returned accurate new post IDs\n      const sortedPosts = state.posts.sort((a, b) => {\n        if (a.id > b.id) return 1;\n        if (a.id < b.id) return -1;\n        return 0;\n      });\n      action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n      // End fix for fake API post IDs \n\n      action.payload.userId = Number(action.payload.userId);\n      action.payload.date = new Date().toISOString();\n      action.payload.reactions = {\n        thumbsUp: 0,\n        hooray: 0,\n        heart: 0,\n        rocket: 0,\n        eyes: 0\n      };\n      console.log(action.payload);\n      state.posts.push(action.payload);\n    });\n  }\n});\nexport const selectAllProjects = state => state.projects;\nexport const {\n  projectAdded\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","nanoid","axios","POSTS_URL","initialState","projects","status","error","fetchProjects","response","get","console","log","data","projectsSlice","name","reducers","projectAdded","reducer","state","action","push","payload","prepare","title","content","id","extraReducers","builder","addCase","pending","fulfilled","min","loadedPosts","map","post","date","sub","Date","minutes","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","posts","concat","rejected","message","sortedPosts","sort","a","b","length","userId","Number","hooray","eyes","selectAllProjects","actions"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { nanoid } from \"@reduxjs/toolkit\"\nimport axios from \"axios\"\n\n\nconst POSTS_URL = \"http://localhost:3500/projects/get\"\n\nconst initialState = {\n    projects: [],\n    status: 'idle',\n    error: null\n}\n\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects/get', async () => {\n    const response = await axios.get(POSTS_URL)\n    console.log(response)\n    return response.data\n})\n\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectAdded: {\n            reducer: (state, action) => {\n                state.projects.push(action.payload)\n            },\n            prepare: (title, content) => {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title: title,\n                        content: content\n                    }\n                }\n            }\n        }\n    },\n    extraReducers(builder) {\n        builder\n            .addCase(fetchProjects.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchProjects.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                // Adding date and reactions\n                let min = 1;\n                const loadedPosts = action.payload.map(post => {\n                    post.date = sub(new Date(), { minutes: min++ }).toISOString();\n                    post.reactions = {\n                        thumbsUp: 0,\n                        wow: 0,\n                        heart: 0,\n                        rocket: 0,\n                        coffee: 0\n                    }\n                    return post;\n                });\n\n                // Add any fetched posts to the array\n                state.posts = state.posts.concat(loadedPosts)\n            })\n            .addCase(fetchProjects.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(fetchProjects.fulfilled, (state, action) => {\n                // Fix for API post IDs:\n                // Creating sortedPosts & assigning the id \n                // would be not be needed if the fake API \n                // returned accurate new post IDs\n                const sortedPosts = state.posts.sort((a, b) => {\n                    if (a.id > b.id) return 1\n                    if (a.id < b.id) return -1\n                    return 0\n                })\n                action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n                // End fix for fake API post IDs \n\n                action.payload.userId = Number(action.payload.userId)\n                action.payload.date = new Date().toISOString();\n                action.payload.reactions = {\n                    thumbsUp: 0,\n                    hooray: 0,\n                    heart: 0,\n                    rocket: 0,\n                    eyes: 0\n                }\n                console.log(action.payload)\n                state.posts.push(action.payload)\n            })}\n})\n\nexport const selectAllProjects = (state) => state.projects;\n\nexport const { projectAdded } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}