{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nconst initialState = {\n  allProjects: [{\n    id: '1',\n    title: 'First Post!',\n    content: 'Hello!'\n  }, {\n    id: '2',\n    title: 'Second Post',\n    content: 'More text'\n  }],\n  status: 'idle',\n  error: null\n};\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    projectAdded: {\n      reducer: (state, action) => {\n        state.allProjects.push(action.payload);\n      },\n      prepare: (title, content) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content\n          }\n        };\n      }\n    },\n    projectUpdated: {\n      reducer: (state, action) => {\n        const existingProject = state.allProjects.find(project => project.id === action.payload.id);\n        if (existingProject) {\n          existingProject.title = action.payload.title;\n          existingProject.content = action.payload.content;\n        }\n      },\n      prepare: (id, title, content) => {\n        return {\n          payload: {\n            id,\n            title,\n            content\n          }\n        };\n      }\n    }\n  }\n});\nexport const selectAllProjects = state => state.projects;\nexport const selectProjectById = (state, Id) => state.projects.find(project => project.id === Id);\n\n// action creater, which is automatically created with the same name as reducer\nexport const {\n  projectAdded,\n  projectUpdated\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","allProjects","id","title","content","status","error","projectsSlice","name","reducers","projectAdded","reducer","state","action","push","payload","prepare","projectUpdated","existingProject","find","project","selectAllProjects","projects","selectProjectById","Id","actions"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport { nanoid } from \"@reduxjs/toolkit\"\n\n\nconst initialState = {\n    allProjects: [\n        { id: '1', title: 'First Post!', content: 'Hello!' },\n        { id: '2', title: 'Second Post', content: 'More text' }\n    ],\n    status: 'idle',\n    error: null\n}\n\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectAdded: {\n            reducer: (state, action) => {\n                state.allProjects.push(action.payload)\n            },\n            prepare: (title, content) => {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        content\n                    }\n                }\n            }\n        },\n        projectUpdated: {\n            reducer: (state, action) => {\n                const existingProject = state.allProjects.find(project => project.id === action.payload.id)\n                if (existingProject) {\n                    existingProject.title = action.payload.title\n                    existingProject.content = action.payload.content\n                }\n\n            },\n            prepare: (id, title, content) => {\n                return {\n                    payload: {\n                        id,\n                        title,\n                        content\n                    }\n                }\n            }\n        },\n\n    }\n})\n\nexport const selectAllProjects = (state) => state.projects;\nexport const selectProjectById = (state, Id) => state.projects.find(project => project.id === Id)\n\n// action creater, which is automatically created with the same name as reducer\nexport const { projectAdded, projectUpdated } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,MAAM,QAAQ,kBAAkB;AAGzC,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,CACT;IAAEC,EAAE,EAAE,GAAG;IAAEC,KAAK,EAAE,aAAa;IAAEC,OAAO,EAAE;EAAS,CAAC,EACpD;IAAEF,EAAE,EAAE,GAAG;IAAEC,KAAK,EAAE,aAAa;IAAEC,OAAO,EAAE;EAAY,CAAC,CAC1D;EACDC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACX,CAAC;AAGD,MAAMC,aAAa,GAAGT,WAAW,CAAC;EAC9BU,IAAI,EAAE,UAAU;EAChBR,YAAY;EACZS,QAAQ,EAAE;IACNC,YAAY,EAAE;MACVC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QACxBD,KAAK,CAACX,WAAW,CAACa,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAC1C,CAAC;MACDC,OAAO,EAAEA,CAACb,KAAK,EAAEC,OAAO,KAAK;QACzB,OAAO;UACHW,OAAO,EAAE;YACLb,EAAE,EAAEH,MAAM,CAAC,CAAC;YACZI,KAAK;YACLC;UACJ;QACJ,CAAC;MACL;IACJ,CAAC;IACDa,cAAc,EAAE;MACZN,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QACxB,MAAMK,eAAe,GAAGN,KAAK,CAACX,WAAW,CAACkB,IAAI,CAACC,OAAO,IAAIA,OAAO,CAAClB,EAAE,KAAKW,MAAM,CAACE,OAAO,CAACb,EAAE,CAAC;QAC3F,IAAIgB,eAAe,EAAE;UACjBA,eAAe,CAACf,KAAK,GAAGU,MAAM,CAACE,OAAO,CAACZ,KAAK;UAC5Ce,eAAe,CAACd,OAAO,GAAGS,MAAM,CAACE,OAAO,CAACX,OAAO;QACpD;MAEJ,CAAC;MACDY,OAAO,EAAEA,CAACd,EAAE,EAAEC,KAAK,EAAEC,OAAO,KAAK;QAC7B,OAAO;UACHW,OAAO,EAAE;YACLb,EAAE;YACFC,KAAK;YACLC;UACJ;QACJ,CAAC;MACL;IACJ;EAEJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMiB,iBAAiB,GAAIT,KAAK,IAAKA,KAAK,CAACU,QAAQ;AAC1D,OAAO,MAAMC,iBAAiB,GAAGA,CAACX,KAAK,EAAEY,EAAE,KAAKZ,KAAK,CAACU,QAAQ,CAACH,IAAI,CAACC,OAAO,IAAIA,OAAO,CAAClB,EAAE,KAAKsB,EAAE,CAAC;;AAEjG;AACA,OAAO,MAAM;EAAEd,YAAY;EAAEO;AAAe,CAAC,GAAGV,aAAa,CAACkB,OAAO;AAErE,eAAelB,aAAa,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}