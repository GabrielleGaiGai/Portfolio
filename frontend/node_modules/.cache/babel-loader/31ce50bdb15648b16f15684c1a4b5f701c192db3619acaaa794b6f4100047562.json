{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  allProjects: [],\n  status: 'idle',\n  error: null\n};\nexport const postProject = createAsyncThunk('projects/postProject');\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n  const response = await axios.get('http://localhost:3500/projects');\n  await new Promise(r => setTimeout(r, 1000));\n  return response.data;\n});\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    projectAdded: {\n      reducer: (state, action) => {\n        state.allProjects.push(action.payload);\n      },\n      prepare: (title, summary) => {\n        return {\n          payload: {\n            _id: nanoid(),\n            title,\n            summary\n          }\n        };\n      }\n    },\n    projectUpdated: {\n      reducer: (state, action) => {\n        const existingProject = state.allProjects.find(project => project._id === action.payload._id);\n        if (existingProject) {\n          existingProject.title = action.payload.title;\n          existingProject.summary = action.payload.summary;\n        }\n      },\n      prepare: (_id, title, summary) => {\n        return {\n          payload: {\n            _id,\n            title,\n            summary\n          }\n        };\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchProjects.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.allProjects = action.payload;\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const selectAllProjects = state => state.projects.allProjects;\nexport const selectProjectById = (state, _id) => state.projects.allProjects.find(project => project._id === _id);\n\n// action creater, which is automatically created with the same name as reducer\nexport const {\n  projectAdded,\n  projectUpdated\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","axios","createAsyncThunk","initialState","allProjects","status","error","postProject","fetchProjects","response","get","Promise","r","setTimeout","data","projectsSlice","name","reducers","projectAdded","reducer","state","action","push","payload","prepare","title","summary","_id","projectUpdated","existingProject","find","project","extraReducers","builder","addCase","pending","fulfilled","rejected","message","selectAllProjects","projects","selectProjectById","actions"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport { nanoid } from \"@reduxjs/toolkit\"\nimport axios from 'axios';\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\n\nconst initialState = {\n    allProjects: [],\n    status: 'idle',\n    error: null\n}\n\nexport const postProject = createAsyncThunk('projects/postProject')\n\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n    const response = await axios.get('http://localhost:3500/projects');\n    await new Promise(r => setTimeout(r, 1000));\n    return response.data\n})\n\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectAdded: {\n            reducer: (state, action) => {\n                state.allProjects.push(action.payload)\n            },\n            prepare: (title, summary) => {\n                return {\n                    payload: { _id: nanoid(), title, summary }\n                }\n            }\n        },\n        projectUpdated: {\n            reducer: (state, action) => {\n                const existingProject = state.allProjects.find(project => project._id === action.payload._id)\n                if (existingProject) {\n                    existingProject.title = action.payload.title\n                    existingProject.summary = action.payload.summary\n                }\n\n            },\n            prepare: (_id, title, summary) => {\n                return {\n                    payload: { _id, title, summary }\n                }\n            }\n        },\n\n    },\n    extraReducers(builder) {\n        builder\n            .addCase(fetchProjects.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchProjects.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.allProjects = action.payload\n            })\n            .addCase(fetchProjects.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n    }\n})\n\nexport const selectAllProjects = (state) => state.projects.allProjects;\nexport const selectProjectById = (state, _id) => state.projects.allProjects.find(project => project._id === _id)\n\n// action creater, which is automatically created with the same name as reducer\nexport const { projectAdded, projectUpdated } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}