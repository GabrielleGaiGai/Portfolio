{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3500'\n  }),\n  tagTypes: ['Project'],\n  endpoints: builder => ({\n    getProjects: builder.query({\n      query: () => '/projects',\n      providesTags: (result = [], error, arg) => ['Project', ...result.map(({\n        id\n      }) => ({\n        type: 'Project',\n        id\n      }))]\n    }),\n    getProject: builder.query({\n      query: projectId => `/projects/${projectId}`\n    }),\n    AddProject: builder.mutation({\n      query: project => ({\n        url: '/projects',\n        method: 'POST',\n        body: project\n      }),\n      invalidatesTags: ['Project']\n    }),\n    EditProject: builder.mutation({\n      query: project => ({\n        url: '/projects',\n        method: 'PATCH',\n        body: project\n      }),\n      invalidatesTags: ['Project']\n    })\n  })\n});\n\n// Export the auto-generated hook for the `getPosts` query endpoint\nexport const {\n  useGetProjectsQuery,\n  useGetProjectQuery,\n  useAddProjectMutation,\n  useEditProjectMutation\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getProjects","query","providesTags","result","error","arg","map","id","type","getProject","projectId","AddProject","mutation","project","url","method","body","invalidatesTags","EditProject","useGetProjectsQuery","useGetProjectQuery","useAddProjectMutation","useEditProjectMutation"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const apiSlice = createApi({\n    reducerPath: 'api',\n    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3500' }),\n    tagTypes: ['Project'],\n    endpoints: builder => ({\n        getProjects: builder.query({\n            query: () => '/projects',\n            providesTags: (result = [], error, arg) => [\n                'Project',\n                ...result.map(({ id }) => ({ type: 'Project', id }))\n            ]\n        }),\n        getProject: builder.query({\n            query: projectId => `/projects/${projectId}`,\n            \n        }),\n        AddProject: builder.mutation({\n            query: project => ({\n                url: '/projects',\n                method: 'POST',\n                body: project\n            }),\n            invalidatesTags: ['Project']\n        }),\n        EditProject: builder.mutation({\n            query: project => ({\n                url: '/projects',\n                method: 'PATCH',\n                body: project\n            }),\n            invalidatesTags: ['Project']\n        })\n    })\n})\n\n// Export the auto-generated hook for the `getPosts` query endpoint\nexport const { useGetProjectsQuery, useGetProjectQuery, useAddProjectMutation, useEditProjectMutation } = apiSlice"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAC9BG,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAwB,CAAC,CAAC;EAC/DC,QAAQ,EAAE,CAAC,SAAS,CAAC;EACrBC,SAAS,EAAEC,OAAO,KAAK;IACnBC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAC;MACvBA,KAAK,EAAEA,CAAA,KAAM,WAAW;MACxBC,YAAY,EAAEA,CAACC,MAAM,GAAG,EAAE,EAAEC,KAAK,EAAEC,GAAG,KAAK,CACvC,SAAS,EACT,GAAGF,MAAM,CAACG,GAAG,CAAC,CAAC;QAAEC;MAAG,CAAC,MAAM;QAAEC,IAAI,EAAE,SAAS;QAAED;MAAG,CAAC,CAAC,CAAC;IAE5D,CAAC,CAAC;IACFE,UAAU,EAAEV,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAES,SAAS,IAAK,aAAYA,SAAU;IAE/C,CAAC,CAAC;IACFC,UAAU,EAAEZ,OAAO,CAACa,QAAQ,CAAC;MACzBX,KAAK,EAAEY,OAAO,KAAK;QACfC,GAAG,EAAE,WAAW;QAChBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACV,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,SAAS;IAC/B,CAAC,CAAC;IACFC,WAAW,EAAEnB,OAAO,CAACa,QAAQ,CAAC;MAC1BX,KAAK,EAAEY,OAAO,KAAK;QACfC,GAAG,EAAE,WAAW;QAChBC,MAAM,EAAE,OAAO;QACfC,IAAI,EAAEH;MACV,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,SAAS;IAC/B,CAAC;EACL,CAAC;AACL,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEE,mBAAmB;EAAEC,kBAAkB;EAAEC,qBAAqB;EAAEC;AAAuB,CAAC,GAAG7B,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}