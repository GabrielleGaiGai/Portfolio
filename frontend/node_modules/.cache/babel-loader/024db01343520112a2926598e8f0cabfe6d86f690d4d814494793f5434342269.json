{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nconst projectsSelector = createEntityAdapter();\nconst initialState = projectsSelector.getInitialState({\n  status: 'idle',\n  error: null\n});\nexport const postProject = createAsyncThunk('projects/postProject', async body => {\n  const response = await axios.post('http://localhost:3500/projects', body);\n  return response.data;\n});\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n  const response = await axios.get('http://localhost:3500/projects');\n  await new Promise(r => setTimeout(r, 1000));\n  return response.data;\n});\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    projectUpdated: {\n      reducer: (state, action) => {\n        const existingPost = state.entities[postId];\n        const existingProject = state.allProjects.find(project => project._id === action.payload._id);\n        if (existingProject) {\n          existingProject.title = action.payload.title;\n          existingProject.summary = action.payload.summary;\n        }\n      },\n      prepare: (_id, title, summary) => {\n        return {\n          payload: {\n            _id,\n            title,\n            summary\n          }\n        };\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchProjects.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.allProjects = action.payload;\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(postProject.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.allProjects.push(action.payload.project);\n    });\n  }\n});\nexport const selectAllProjects = state => state.projects.allProjects;\nexport const selectProjectById = (state, _id) => state.projects.allProjects.find(project => project._id === _id);\n\n// action creater, which is automatically created with the same name as reducer\nexport const {\n  projectUpdated\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["axios","createAsyncThunk","createEntityAdapter","createSlice","projectsSelector","initialState","getInitialState","status","error","postProject","body","response","post","data","fetchProjects","get","Promise","r","setTimeout","projectsSlice","name","reducers","projectUpdated","reducer","state","action","existingPost","entities","postId","existingProject","allProjects","find","project","_id","payload","title","summary","prepare","extraReducers","builder","addCase","pending","fulfilled","rejected","message","push","selectAllProjects","projects","selectProjectById","actions"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\n\n\nconst projectsSelector = createEntityAdapter()\n\n\nconst initialState = projectsSelector.getInitialState({\n    status: 'idle',\n    error: null\n})\n\nexport const postProject = createAsyncThunk('projects/postProject', async(body) => {\n    const response = await axios.post('http://localhost:3500/projects', body);\n    return response.data\n})\n\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n    const response = await axios.get('http://localhost:3500/projects');\n    await new Promise(r => setTimeout(r, 1000));\n    return response.data\n})\n\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectUpdated: {\n            reducer: (state, action) => {\n                const existingPost = state.entities[postId]\n                const existingProject = state.allProjects.find(project => project._id === action.payload._id)\n                if (existingProject) {\n                    existingProject.title = action.payload.title\n                    existingProject.summary = action.payload.summary\n                }\n\n            },\n            prepare: (_id, title, summary) => {\n                return {\n                    payload: { _id, title, summary }\n                }\n            }\n        },\n\n    },\n    extraReducers(builder) {\n        builder\n            .addCase(fetchProjects.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchProjects.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.allProjects = action.payload\n            })\n            .addCase(fetchProjects.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(postProject.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.allProjects.push(action.payload.project)\n            })\n    }\n})\n\nexport const selectAllProjects = (state) => state.projects.allProjects;\nexport const selectProjectById = (state, _id) => state.projects.allProjects.find(project => project._id === _id)\n\n// action creater, which is automatically created with the same name as reducer\nexport const { projectUpdated } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,WAAW,QAAQ,kBAAkB;AAGrF,MAAMC,gBAAgB,GAAGF,mBAAmB,CAAC,CAAC;AAG9C,MAAMG,YAAY,GAAGD,gBAAgB,CAACE,eAAe,CAAC;EAClDC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAGR,gBAAgB,CAAC,sBAAsB,EAAE,MAAMS,IAAI,IAAK;EAC/E,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,gCAAgC,EAAEF,IAAI,CAAC;EACzE,OAAOC,QAAQ,CAACE,IAAI;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,aAAa,GAAGb,gBAAgB,CAAC,wBAAwB,EAAE,YAAY;EAChF,MAAMU,QAAQ,GAAG,MAAMX,KAAK,CAACe,GAAG,CAAC,gCAAgC,CAAC;EAClE,MAAM,IAAIC,OAAO,CAACC,CAAC,IAAIC,UAAU,CAACD,CAAC,EAAE,IAAI,CAAC,CAAC;EAC3C,OAAON,QAAQ,CAACE,IAAI;AACxB,CAAC,CAAC;AAGF,MAAMM,aAAa,GAAGhB,WAAW,CAAC;EAC9BiB,IAAI,EAAE,UAAU;EAChBf,YAAY;EACZgB,QAAQ,EAAE;IACNC,cAAc,EAAE;MACZC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QACxB,MAAMC,YAAY,GAAGF,KAAK,CAACG,QAAQ,CAACC,MAAM,CAAC;QAC3C,MAAMC,eAAe,GAAGL,KAAK,CAACM,WAAW,CAACC,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,GAAG,KAAKR,MAAM,CAACS,OAAO,CAACD,GAAG,CAAC;QAC7F,IAAIJ,eAAe,EAAE;UACjBA,eAAe,CAACM,KAAK,GAAGV,MAAM,CAACS,OAAO,CAACC,KAAK;UAC5CN,eAAe,CAACO,OAAO,GAAGX,MAAM,CAACS,OAAO,CAACE,OAAO;QACpD;MAEJ,CAAC;MACDC,OAAO,EAAEA,CAACJ,GAAG,EAAEE,KAAK,EAAEC,OAAO,KAAK;QAC9B,OAAO;UACHF,OAAO,EAAE;YAAED,GAAG;YAAEE,KAAK;YAAEC;UAAQ;QACnC,CAAC;MACL;IACJ;EAEJ,CAAC;EACDE,aAAaA,CAACC,OAAO,EAAE;IACnBA,OAAO,CACFC,OAAO,CAAC1B,aAAa,CAAC2B,OAAO,EAAE,CAACjB,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACjB,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDiC,OAAO,CAAC1B,aAAa,CAAC4B,SAAS,EAAE,CAAClB,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACjB,MAAM,GAAG,WAAW;MAC1BiB,KAAK,CAACM,WAAW,GAAGL,MAAM,CAACS,OAAO;IACtC,CAAC,CAAC,CACDM,OAAO,CAAC1B,aAAa,CAAC6B,QAAQ,EAAE,CAACnB,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACjB,MAAM,GAAG,QAAQ;MACvBiB,KAAK,CAAChB,KAAK,GAAGiB,MAAM,CAACjB,KAAK,CAACoC,OAAO;IACtC,CAAC,CAAC,CACDJ,OAAO,CAAC/B,WAAW,CAACiC,SAAS,EAAE,CAAClB,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACjB,MAAM,GAAG,WAAW;MAC1BiB,KAAK,CAACM,WAAW,CAACe,IAAI,CAACpB,MAAM,CAACS,OAAO,CAACF,OAAO,CAAC;IAClD,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMc,iBAAiB,GAAItB,KAAK,IAAKA,KAAK,CAACuB,QAAQ,CAACjB,WAAW;AACtE,OAAO,MAAMkB,iBAAiB,GAAGA,CAACxB,KAAK,EAAES,GAAG,KAAKT,KAAK,CAACuB,QAAQ,CAACjB,WAAW,CAACC,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,GAAG,KAAKA,GAAG,CAAC;;AAEhH;AACA,OAAO,MAAM;EAAEX;AAAe,CAAC,GAAGH,aAAa,CAAC8B,OAAO;AAEvD,eAAe9B,aAAa,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}