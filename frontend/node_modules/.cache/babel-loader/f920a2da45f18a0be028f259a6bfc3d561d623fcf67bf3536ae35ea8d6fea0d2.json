{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!'\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text'\n}];\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    projectAdded: {\n      reducer: (state, action) => {\n        state.projects.push(action.payload);\n      },\n      prepare: (title, content) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title: title,\n            content: content\n          }\n        };\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchProjects.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      const loadedPosts = action.payload;\n      state.projects = state.projects.concat(loadedPosts);\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const selectAllProjects = state => state.projects.projects;\nexport const getProjectsStatus = state => state.projects.status;\nexport const getProjectsError = state => state.projects.error;\nexport const {\n  projectAdded\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","nanoid","axios","initialState","id","title","content","fetchProjects","response","get","POSTS_URL","data","projectsSlice","name","reducers","projectAdded","reducer","state","action","projects","push","payload","prepare","extraReducers","builder","addCase","pending","status","fulfilled","loadedPosts","concat","rejected","error","message","selectAllProjects","getProjectsStatus","getProjectsError","actions"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { nanoid } from \"@reduxjs/toolkit\"\nimport axios from \"axios\"\n\n\nconst initialState = [\n    { id: '1', title: 'First Post!', content: 'Hello!' },\n    { id: '2', title: 'Second Post', content: 'More text' }\n  ]\n\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n    const response = await axios.get(POSTS_URL)\n    return response.data\n})\n\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectAdded: {\n            reducer: (state, action) => {\n                state.projects.push(action.payload)\n            },\n            prepare: (title, content) => {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title: title,\n                        content: content\n                    }\n                }\n            }\n        }\n    },\n\n    extraReducers(builder) {\n        builder\n            .addCase(fetchProjects.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchProjects.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                const loadedPosts = action.payload\n                state.projects = state.projects.concat(loadedPosts)\n            })\n            .addCase(fetchProjects.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n\n    }\n})\n\nexport const selectAllProjects = (state) => state.projects.projects;\nexport const getProjectsStatus = (state) => state.projects.status;\nexport const getProjectsError = (state) => state.projects.error;\n\nexport const { projectAdded } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,MAAM,QAAQ,kBAAkB;AACzC,OAAOC,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,CACjB;EAAEC,EAAE,EAAE,GAAG;EAAEC,KAAK,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAS,CAAC,EACpD;EAAEF,EAAE,EAAE,GAAG;EAAEC,KAAK,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAY,CAAC,CACxD;AAEH,OAAO,MAAMC,aAAa,GAAGP,gBAAgB,CAAC,wBAAwB,EAAE,YAAY;EAChF,MAAMQ,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACC,SAAS,CAAC;EAC3C,OAAOF,QAAQ,CAACG,IAAI;AACxB,CAAC,CAAC;AAGF,MAAMC,aAAa,GAAGb,WAAW,CAAC;EAC9Bc,IAAI,EAAE,UAAU;EAChBV,YAAY;EACZW,QAAQ,EAAE;IACNC,YAAY,EAAE;MACVC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QACxBD,KAAK,CAACE,QAAQ,CAACC,IAAI,CAACF,MAAM,CAACG,OAAO,CAAC;MACvC,CAAC;MACDC,OAAO,EAAEA,CAACjB,KAAK,EAAEC,OAAO,KAAK;QACzB,OAAO;UACHe,OAAO,EAAE;YACLjB,EAAE,EAAEH,MAAM,CAAC,CAAC;YACZI,KAAK,EAAEA,KAAK;YACZC,OAAO,EAAEA;UACb;QACJ,CAAC;MACL;IACJ;EACJ,CAAC;EAEDiB,aAAaA,CAACC,OAAO,EAAE;IACnBA,OAAO,CACFC,OAAO,CAAClB,aAAa,CAACmB,OAAO,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACU,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDF,OAAO,CAAClB,aAAa,CAACqB,SAAS,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACU,MAAM,GAAG,WAAW;MAC1B,MAAME,WAAW,GAAGX,MAAM,CAACG,OAAO;MAClCJ,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACE,QAAQ,CAACW,MAAM,CAACD,WAAW,CAAC;IACvD,CAAC,CAAC,CACDJ,OAAO,CAAClB,aAAa,CAACwB,QAAQ,EAAE,CAACd,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACU,MAAM,GAAG,QAAQ;MACvBV,KAAK,CAACe,KAAK,GAAGd,MAAM,CAACc,KAAK,CAACC,OAAO;IACtC,CAAC,CAAC;EAEV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,iBAAiB,GAAIjB,KAAK,IAAKA,KAAK,CAACE,QAAQ,CAACA,QAAQ;AACnE,OAAO,MAAMgB,iBAAiB,GAAIlB,KAAK,IAAKA,KAAK,CAACE,QAAQ,CAACQ,MAAM;AACjE,OAAO,MAAMS,gBAAgB,GAAInB,KAAK,IAAKA,KAAK,CAACE,QAAQ,CAACa,KAAK;AAE/D,OAAO,MAAM;EAAEjB;AAAa,CAAC,GAAGH,aAAa,CAACyB,OAAO;AAErD,eAAezB,aAAa,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}