{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nconst projectsSelector = createEntityAdapter();\nconst initialState = projectsSelector.getInitialState({\n  status: 'idle',\n  error: null\n});\nexport const postProject = createAsyncThunk('projects/postProject', async body => {\n  const response = await axios.post('http://localhost:3500/projects', body);\n  return response.data;\n});\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n  const response = await axios.get('http://localhost:3500/projects');\n  await new Promise(r => setTimeout(r, 1000));\n  return response.data;\n});\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    projectUpdated: {\n      reducer: (state, action) => {\n        const existingProject = state.entities[action.payload._id];\n        if (existingProject) {\n          existingProject.title = action.payload.title;\n          existingProject.summary = action.payload.summary;\n        }\n      },\n      prepare: (_id, title, summary) => {\n        return {\n          payload: {\n            _id,\n            title,\n            summary\n          }\n        };\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchProjects.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      console.log(action.payload);\n      projectsSelector.upsertMany(state, action.payload.map(project => project.id = project._id));\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(postProject.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.allProjects.push(action.payload.project);\n    });\n  }\n});\nexport const {\n  selectAll: selectAllProjects,\n  selectById: selectProjectById\n} = projectsSelector.getSelectors(state => state.projects);\n\n// action creater, which is automatically created with the same name as reducer\nexport const {\n  projectUpdated\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["axios","createAsyncThunk","createEntityAdapter","createSlice","projectsSelector","initialState","getInitialState","status","error","postProject","body","response","post","data","fetchProjects","get","Promise","r","setTimeout","projectsSlice","name","reducers","projectUpdated","reducer","state","action","existingProject","entities","payload","_id","title","summary","prepare","extraReducers","builder","addCase","pending","fulfilled","console","log","upsertMany","map","project","id","rejected","message","allProjects","push","selectAll","selectAllProjects","selectById","selectProjectById","getSelectors","projects","actions"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\n\nconst projectsSelector = createEntityAdapter()\n\nconst initialState = projectsSelector.getInitialState({\n    status: 'idle',\n    error: null\n})\n\nexport const postProject = createAsyncThunk('projects/postProject', async (body) => {\n    const response = await axios.post('http://localhost:3500/projects', body);\n    return response.data\n})\n\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n    const response = await axios.get('http://localhost:3500/projects');\n    await new Promise(r => setTimeout(r, 1000));\n    return response.data\n})\n\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectUpdated: {\n            reducer: (state, action) => {\n                const existingProject = state.entities[action.payload._id]\n                if (existingProject) {\n                    existingProject.title = action.payload.title\n                    existingProject.summary = action.payload.summary\n                }\n\n            },\n            prepare: (_id, title, summary) => {\n                return {\n                    payload: { _id, title, summary }\n                }\n            }\n        },\n\n    },\n    extraReducers(builder) {\n        builder\n            .addCase(fetchProjects.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchProjects.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                console.log(action.payload)\n                projectsSelector.upsertMany(state, action.payload.map((project) => (\n                    \n                    project.id = project._id\n                )))\n            })\n            .addCase(fetchProjects.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(postProject.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.allProjects.push(action.payload.project)\n            })\n    }\n})\n\nexport const {\n    selectAll: selectAllProjects,\n    selectById: selectProjectById\n} = projectsSelector.getSelectors(state => state.projects)\n\n\n// action creater, which is automatically created with the same name as reducer\nexport const { projectUpdated } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}