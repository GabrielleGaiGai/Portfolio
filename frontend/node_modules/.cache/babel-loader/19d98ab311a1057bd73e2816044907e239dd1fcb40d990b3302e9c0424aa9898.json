{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  allProjects: [{\n    id: '1',\n    title: 'First Post!',\n    content: 'Hello!'\n  }, {\n    id: '2',\n    title: 'Second Post',\n    content: 'More text'\n  }],\n  status: 'idle',\n  error: null\n};\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n  const response = await axios.get('http://localhost:3500/projects');\n  console.log(response);\n  return response.data;\n});\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    projectAdded: {\n      reducer: (state, action) => {\n        state.allProjects.push(action.payload);\n      },\n      prepare: (title, content) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content\n          }\n        };\n      }\n    },\n    projectUpdated: {\n      reducer: (state, action) => {\n        const existingProject = state.allProjects.find(project => project.id === action.payload.id);\n        if (existingProject) {\n          existingProject.title = action.payload.title;\n          existingProject.content = action.payload.content;\n        }\n      },\n      prepare: (id, title, content) => {\n        return {\n          payload: {\n            id,\n            title,\n            content\n          }\n        };\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchProjects.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      state.status = 'success';\n      state.allProjects = state.allProjects.concat(action.payload);\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.status = 'failed';\n      state.er = state.allProjects.concat(action.payload);\n    });\n  }\n});\nexport const selectAllProjects = state => state.projects.allProjects;\nexport const selectProjectById = (state, Id) => state.projects.allProjects.find(project => project.id === Id);\n\n// action creater, which is automatically created with the same name as reducer\nexport const {\n  projectAdded,\n  projectUpdated\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","axios","createAsyncThunk","initialState","allProjects","id","title","content","status","error","fetchProjects","response","get","console","log","data","projectsSlice","name","reducers","projectAdded","reducer","state","action","push","payload","prepare","projectUpdated","existingProject","find","project","extraReducers","builder","addCase","pending","fulfilled","concat","rejected","er","selectAllProjects","projects","selectProjectById","Id","actions"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport { nanoid } from \"@reduxjs/toolkit\"\nimport axios from 'axios';\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\n\nconst initialState = {\n    allProjects: [\n        { id: '1', title: 'First Post!', content: 'Hello!' },\n        { id: '2', title: 'Second Post', content: 'More text' }\n    ],\n    status: 'idle',\n    error: null\n}\n\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n    const response = await axios.get('http://localhost:3500/projects');\n    console.log(response)\n    return response.data\n  })\n\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectAdded: {\n            reducer: (state, action) => {\n                state.allProjects.push(action.payload)\n            },\n            prepare: (title, content) => {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        content\n                    }\n                }\n            }\n        },\n        projectUpdated: {\n            reducer: (state, action) => {\n                const existingProject = state.allProjects.find(project => project.id === action.payload.id)\n                if (existingProject) {\n                    existingProject.title = action.payload.title\n                    existingProject.content = action.payload.content\n                }\n\n            },\n            prepare: (id, title, content) => {\n                return {\n                    payload: {\n                        id,\n                        title,\n                        content\n                    }\n                }\n            }\n        },\n\n    },\n    extraReducers(builder) {\n        builder\n        .addCase(fetchProjects.pending, (state, action) => {\n            state.status = 'loading'\n        })\n        .addCase(fetchProjects.fulfilled, (state, action) => {\n            state.status = 'success'\n            state.allProjects = state.allProjects.concat(action.payload)\n        })\n        .addCase(fetchProjects.rejected, (state, action) => {\n            state.status = 'failed'\n            state.er = state.allProjects.concat(action.payload)\n        })\n    }\n})\n\nexport const selectAllProjects = (state) => state.projects.allProjects;\nexport const selectProjectById = (state, Id) => state.projects.allProjects.find(project => project.id === Id)\n\n// action creater, which is automatically created with the same name as reducer\nexport const { projectAdded, projectUpdated } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}