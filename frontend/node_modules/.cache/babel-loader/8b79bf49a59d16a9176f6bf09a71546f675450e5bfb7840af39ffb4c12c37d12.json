{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nexport const postProject = createAsyncThunk('projects/postProject', async body => {\n  const response = await axios.post('http://localhost:3500/projects', body);\n  return response.data.project;\n});\nexport const patchProject = createAsyncThunk('projects/postProject', async body => {\n  const response = await axios.patch('http://localhost:3500/projects', body);\n  return response.data.project;\n});\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n  const response = await axios.get('http://localhost:3500/projects');\n  return response.data;\n});\nconst projectsSelector = createEntityAdapter();\nconst initialState = projectsSelector.getInitialState({\n  status: 'idle',\n  error: null\n});\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchProjects.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      projectsSelector.setAll(state, action.payload.forEach(project => ({\n        ...project,\n        id: project._id\n      })));\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(postProject.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      projectsSelector.addOne(state, {\n        ...action.payload,\n        id: action.payload._id\n      });\n    }).addCase(patchProject.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      projectsSelector.setOne(state, {\n        ...action.payload,\n        id: action.payload._id\n      });\n    });\n  }\n});\nexport const {\n  selectAll: selectAllProjects,\n  selectById: selectProjectById\n} = projectsSelector.getSelectors(state => state.projects);\n\n// action creater, which is automatically created with the same name as reducer\nexport const {\n  projectUpdated\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["axios","createAsyncThunk","createEntityAdapter","createSlice","postProject","body","response","post","data","project","patchProject","patch","fetchProjects","get","projectsSelector","initialState","getInitialState","status","error","projectsSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","setAll","payload","forEach","id","_id","rejected","message","addOne","setOne","selectAll","selectAllProjects","selectById","selectProjectById","getSelectors","projects","projectUpdated","actions","reducer"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\n\n\nexport const postProject = createAsyncThunk('projects/postProject', async (body) => {\n    const response = await axios.post('http://localhost:3500/projects', body);\n    return response.data.project\n})\n\nexport const patchProject = createAsyncThunk('projects/postProject', async (body) => {\n    const response = await axios.patch('http://localhost:3500/projects', body);\n    return response.data.project\n})\n\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n    const response = await axios.get('http://localhost:3500/projects');\n    return response.data\n})\n\n\nconst projectsSelector = createEntityAdapter()\n\nconst initialState = projectsSelector.getInitialState({\n    status: 'idle',\n    error: null\n})\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n    },\n\n    extraReducers(builder) {\n        builder\n            .addCase(fetchProjects.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchProjects.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                projectsSelector.setAll(state, action.payload.forEach((project) => (\n                    { ...project, id: project._id })))\n            })\n            .addCase(fetchProjects.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(postProject.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                projectsSelector.addOne(state, {...action.payload, id: action.payload._id})\n            })\n            .addCase(patchProject.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                projectsSelector.setOne(state, {...action.payload, id: action.payload._id})\n            })\n    }\n})\n\nexport const {\n    selectAll: selectAllProjects,\n    selectById: selectProjectById\n} = projectsSelector.getSelectors(state => state.projects)\n\n\n// action creater, which is automatically created with the same name as reducer\nexport const { projectUpdated } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,WAAW,QAAQ,kBAAkB;AAGrF,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CAAC,sBAAsB,EAAE,MAAOI,IAAI,IAAK;EAChF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,gCAAgC,EAAEF,IAAI,CAAC;EACzE,OAAOC,QAAQ,CAACE,IAAI,CAACC,OAAO;AAChC,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGT,gBAAgB,CAAC,sBAAsB,EAAE,MAAOI,IAAI,IAAK;EACjF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACW,KAAK,CAAC,gCAAgC,EAAEN,IAAI,CAAC;EAC1E,OAAOC,QAAQ,CAACE,IAAI,CAACC,OAAO;AAChC,CAAC,CAAC;AAEF,OAAO,MAAMG,aAAa,GAAGX,gBAAgB,CAAC,wBAAwB,EAAE,YAAY;EAChF,MAAMK,QAAQ,GAAG,MAAMN,KAAK,CAACa,GAAG,CAAC,gCAAgC,CAAC;EAClE,OAAOP,QAAQ,CAACE,IAAI;AACxB,CAAC,CAAC;AAGF,MAAMM,gBAAgB,GAAGZ,mBAAmB,CAAC,CAAC;AAE9C,MAAMa,YAAY,GAAGD,gBAAgB,CAACE,eAAe,CAAC;EAClDC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,aAAa,GAAGhB,WAAW,CAAC;EAC9BiB,IAAI,EAAE,UAAU;EAChBL,YAAY;EACZM,QAAQ,EAAE,CACV,CAAC;EAEDC,aAAaA,CAACC,OAAO,EAAE;IACnBA,OAAO,CACFC,OAAO,CAACZ,aAAa,CAACa,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACT,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDO,OAAO,CAACZ,aAAa,CAACgB,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACT,MAAM,GAAG,WAAW;MAC1BH,gBAAgB,CAACe,MAAM,CAACH,KAAK,EAAEC,MAAM,CAACG,OAAO,CAACC,OAAO,CAAEtB,OAAO,KAC1D;QAAE,GAAGA,OAAO;QAAEuB,EAAE,EAAEvB,OAAO,CAACwB;MAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CACDT,OAAO,CAACZ,aAAa,CAACsB,QAAQ,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACT,MAAM,GAAG,QAAQ;MACvBS,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACT,KAAK,CAACiB,OAAO;IACtC,CAAC,CAAC,CACDX,OAAO,CAACpB,WAAW,CAACwB,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACT,MAAM,GAAG,WAAW;MAC1BH,gBAAgB,CAACsB,MAAM,CAACV,KAAK,EAAE;QAAC,GAAGC,MAAM,CAACG,OAAO;QAAEE,EAAE,EAAEL,MAAM,CAACG,OAAO,CAACG;MAAG,CAAC,CAAC;IAC/E,CAAC,CAAC,CACDT,OAAO,CAACd,YAAY,CAACkB,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACT,MAAM,GAAG,WAAW;MAC1BH,gBAAgB,CAACuB,MAAM,CAACX,KAAK,EAAE;QAAC,GAAGC,MAAM,CAACG,OAAO;QAAEE,EAAE,EAAEL,MAAM,CAACG,OAAO,CAACG;MAAG,CAAC,CAAC;IAC/E,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EACTK,SAAS,EAAEC,iBAAiB;EAC5BC,UAAU,EAAEC;AAChB,CAAC,GAAG3B,gBAAgB,CAAC4B,YAAY,CAAChB,KAAK,IAAIA,KAAK,CAACiB,QAAQ,CAAC;;AAG1D;AACA,OAAO,MAAM;EAAEC;AAAe,CAAC,GAAGzB,aAAa,CAAC0B,OAAO;AAEvD,eAAe1B,aAAa,CAAC2B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}