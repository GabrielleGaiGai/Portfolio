{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst POSTS_URL = \"http://localhost:3500/projects\";\nconst initialState = {\n  projects: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n  // const response = await axios.get(POSTS_URL)\n  console.log(\"There\", response);\n  response;\n  return response.data;\n});\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    projectAdded: {\n      reducer: (state, action) => {\n        state.projects.push(action.payload);\n      },\n      prepare: (title, content) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title: title,\n            content: content\n          }\n        };\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchProjects.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.projects = state.projects.concat(action.payload);\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const selectAllProjects = state => state.projects.projects;\nexport const getProjectsStatus = state => state.projects.status;\nexport const getProjectsError = state => state.projects.error;\nexport const {\n  projectAdded\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","nanoid","axios","POSTS_URL","initialState","projects","status","error","fetchProjects","console","log","response","data","projectsSlice","name","reducers","projectAdded","reducer","state","action","push","payload","prepare","title","content","id","extraReducers","builder","addCase","pending","fulfilled","concat","rejected","message","selectAllProjects","getProjectsStatus","getProjectsError","actions"],"sources":["/Users/gabrielle/Documents/Development/portfolio/frontend/src/features/projects/projectsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { nanoid } from \"@reduxjs/toolkit\"\nimport axios from \"axios\"\n\n\nconst POSTS_URL = \"http://localhost:3500/projects\"\n\nconst initialState = {\n    projects: [],\n    status: 'idle',\n    error: null\n}\n\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n    // const response = await axios.get(POSTS_URL)\n    console.log(\"There\", response)\n    response \n    return response.data\n})\n\n\nconst projectsSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectAdded: {\n            reducer: (state, action) => {\n                state.projects.push(action.payload)\n            },\n            prepare: (title, content) => {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title: title,\n                        content: content\n                    }\n                }\n            }\n        }\n    },\n\n    extraReducers(builder) {\n        builder\n            .addCase(fetchProjects.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchProjects.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.projects = state.projects.concat(action.payload)\n            })\n            .addCase(fetchProjects.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n    }\n})\n\nexport const selectAllProjects = (state) => state.projects.projects;\nexport const getProjectsStatus = (state) => state.projects.status;\nexport const getProjectsError = (state) => state.projects.error;\n\nexport const { projectAdded } = projectsSlice.actions;\n\nexport default projectsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,MAAM,QAAQ,kBAAkB;AACzC,OAAOC,KAAK,MAAM,OAAO;AAGzB,MAAMC,SAAS,GAAG,gCAAgC;AAElD,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGR,gBAAgB,CAAC,wBAAwB,EAAE,YAAY;EAChF;EACAS,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,QAAQ,CAAC;EAC9BA,QAAQ;EACR,OAAOA,QAAQ,CAACC,IAAI;AACxB,CAAC,CAAC;AAGF,MAAMC,aAAa,GAAGd,WAAW,CAAC;EAC9Be,IAAI,EAAE,UAAU;EAChBV,YAAY;EACZW,QAAQ,EAAE;IACNC,YAAY,EAAE;MACVC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QACxBD,KAAK,CAACb,QAAQ,CAACe,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MACvC,CAAC;MACDC,OAAO,EAAEA,CAACC,KAAK,EAAEC,OAAO,KAAK;QACzB,OAAO;UACHH,OAAO,EAAE;YACLI,EAAE,EAAExB,MAAM,CAAC,CAAC;YACZsB,KAAK,EAAEA,KAAK;YACZC,OAAO,EAAEA;UACb;QACJ,CAAC;MACL;IACJ;EACJ,CAAC;EAEDE,aAAaA,CAACC,OAAO,EAAE;IACnBA,OAAO,CACFC,OAAO,CAACpB,aAAa,CAACqB,OAAO,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACZ,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDsB,OAAO,CAACpB,aAAa,CAACsB,SAAS,EAAE,CAACZ,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACZ,MAAM,GAAG,WAAW;MAC1BY,KAAK,CAACb,QAAQ,GAAGa,KAAK,CAACb,QAAQ,CAAC0B,MAAM,CAACZ,MAAM,CAACE,OAAO,CAAC;IAC1D,CAAC,CAAC,CACDO,OAAO,CAACpB,aAAa,CAACwB,QAAQ,EAAE,CAACd,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACZ,MAAM,GAAG,QAAQ;MACvBY,KAAK,CAACX,KAAK,GAAGY,MAAM,CAACZ,KAAK,CAAC0B,OAAO;IACtC,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,iBAAiB,GAAIhB,KAAK,IAAKA,KAAK,CAACb,QAAQ,CAACA,QAAQ;AACnE,OAAO,MAAM8B,iBAAiB,GAAIjB,KAAK,IAAKA,KAAK,CAACb,QAAQ,CAACC,MAAM;AACjE,OAAO,MAAM8B,gBAAgB,GAAIlB,KAAK,IAAKA,KAAK,CAACb,QAAQ,CAACE,KAAK;AAE/D,OAAO,MAAM;EAAES;AAAa,CAAC,GAAGH,aAAa,CAACwB,OAAO;AAErD,eAAexB,aAAa,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}